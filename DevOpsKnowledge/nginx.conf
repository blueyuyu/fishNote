user nginx;
worker_processes auto;
pid /var/run/nginx.pid;
worker_rlimit_nofile 51200;

events {
  use epoll;
  worker_connections 51200;
  multi_accept on;
}
 

http {
  include mime.types;
  default_type application/octet-stream;
  server_names_hash_bucket_size 128;
  client_header_buffer_size 32k;
  large_client_header_buffers 4 32k;
  client_max_body_size 1024000m;                     #最大请求文件大小
  client_body_buffer_size 10m;
  sendfile on;
  tcp_nopush on;
  keepalive_timeout 120;
  server_tokens off;
  tcp_nodelay on;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 4 64k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  fastcgi_intercept_errors on;

  gzip on;
  gzip_buffers 16 8k;
  gzip_comp_level 6;
  gzip_http_version 1.1;
  gzip_min_length 256;
  gzip_proxied any;
  gzip_vary on;
  gzip_types
    text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml
    text/javascript application/javascript application/x-javascript
    text/x-json application/json application/x-web-app-manifest+json
    text/css text/plain text/x-component
    font/opentype application/x-font-ttf application/vnd.ms-fontobject
    image/x-icon;
  gzip_disable "MSIE [1-6]\.(?!.*SV1)";

  include vhost/*.conf;

server {
    listen   443 ssl;
    server_name  rancher.funsine.com;         #rancher https                          #修改 - rancher域名
    ssl_certificate /etc/nginx/ssl/server-ca.crt;                                     #与证书名称对应(无需修改)（先启动rancher，然后执行本章上述拷贝命令！）
    ssl_certificate_key /etc/nginx/ssl/server-ca.key;                                 #与证书名称对应(无需修改)
    location / {
        proxy_pass https://10.0.0.102:8443;                                           #修改
        proxy_set_header REMOTE_ADDR $remote_addr;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    location /k8s/clusters/c-swskk/api/v1/namespaces/cattle-prometheus/services/ {
        proxy_pass https://10.0.0.102:8443;                                            #修改
        proxy_set_header REMOTE_ADDR $remote_addr;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
      }
 }

server {
    listen   80; 
    server_name  repo.funsine.com;                                                      #修改 - 仓库域名
    
    location / {
        proxy_pass http://10.0.0.102:8081;                                              #修改
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
  }


upstream apptraefik {
    server 10.0.0.102:80 weight=1;                                                      #修改  这里对应的traefik的节点ip（负载均衡的方式，不能填管理节点ip，否则会死循环）
    server 10.0.0.103:80 weight=1;                                                      #修改  这里对应的traefik的节点ip
    server 10.0.0.104:80 weight=1;                                                      #修改  这里对应的traefik的节点ip
}

server {
    listen   80 ;
    server_name  ai.funsine.com;                                                       #修改 - 数听主程https
   
    location / {
        proxy_pass http://apptraefik;
        proxy_set_header REMOTE_ADDR $remote_addr;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

    }
  }

server {
    listen   80 ; 
    server_name  rancher.funsine.com;                                                 #修改 - rancher80端口
    client_max_body_size 1G;

    location / {
      proxy_pass http://10.0.0.102:8080;                                              #修改
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
  }

server {
    listen   80;
    server_name  ai.funsine.com;                                                      #修改 - 数听主程重定向到https
    client_max_body_size 1G;
    location / {
    rewrite ^(.*)$ https://${server_name}$1 permanent;
    }
  }
  
#nexus同域名根据条件不同端口
upstream nexus_docker_hosted {
    server 192.168.100.30:8085;                                                           #修改
}
upstream nexus_docker_group {
    server 192.168.100.30:8084;                                                           #修改
}

#nexus同域名根据条件不同端口
upstream nexus_docker_x86_hosted {
    server 192.168.100.30:8083;                                                           #修改
}
upstream nexus_docker_x86_group {
    server 192.168.100.30:8082;                                                           #修改
}

#nexus内部访问镜像仓库
server {
    listen 80 default;
    listen 443 ssl;
    server_name idocker.io ;                                                          #内部访问本地私服使用的域名（无需修改）
    ssl_certificate /etc/nginx/ssl/idocker-io.crt;                                    #idocker证书（无需修改）
    ssl_certificate_key /etc/nginx/ssl/idocker-io.key;                                #idocker证书（无需修改）

    client_max_body_size 0;
    chunked_transfer_encoding on;
    # 设置默认使用推送代理
    set $upstream "nexus_docker_hosted";
    set $upstream_x86 "nexus_docker_x86_hosted";

    # 当请求是GET，也就是拉取镜像的时候，这里改为拉取代理，如此便解决了拉取和推送的端口统一
    if ( $request_method ~* 'GET') {
        set $upstream "nexus_docker_group";
        set $upstream_x86 "nexus_docker_x86_group";
    }
    # 只有本地仓库才支持搜索，所以将搜索请求转发到本地仓库，否则出现500报错
    if ($request_uri ~ '/search') {
        set $upstream "nexus_docker_hosted";
        set $upstream_x86 "nexus_docker_x86_hosted";
    }


    index index.html index.htm index.php;
    location / {
            proxy_pass http://$upstream;
            if ($remote_addr = 192.168.100.30) {                        #修改（根据实际的节点进行配置与增减）（除以下配置之外的所有主机的请求，皆被识别为arm机器）
                proxy_pass http://$upstream_x86;
            }
            if ($remote_addr = 192.168.100.31) {                        #修改（根据实际的节点进行配置与增减）
                proxy_pass http://$upstream_x86;
            }
            if ($remote_addr = 192.168.100.32) {                        #修改（根据实际的节点进行配置与增减）
                proxy_pass http://$upstream_x86;
            }
            if ($remote_addr = 192.168.100.74) {                        #修改（根据实际的节点进行配置与增减）
                proxy_pass http://$upstream_x86;
            }
            if ($remote_addr = 192.168.100.76) {                        #修改（根据实际的节点进行配置与增减）
                proxy_pass http://$upstream_x86;
            }

            proxy_set_header Host $host;
            proxy_connect_timeout 3600;
            proxy_send_timeout 3600;
            proxy_read_timeout 3600;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_buffering off;
            proxy_request_buffering off;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto http;
            }
    # 将主机端口的 9090 端口暴露出来
  }

}
